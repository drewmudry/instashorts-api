version: '3.8'

services:
  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "8000:8000"
    volumes:
      - .:/app # Mounts your local code into the container for hot-reload
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/instashorts?sslmode=disable
      - REDIS_URL=redis:6379
    depends_on:
      - postgres
      - redis
    command: ["air", "-c", ".air.toml"] # Use Air for hot-reloading

  # Scheduler Service (Runs cron job scheduling - only run ONE)
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile.dev
    volumes:
      - .:/app # Mounts local code so changes are reflected
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/instashorts?sslmode=disable
      - REDIS_URL=redis:6379
    depends_on:
      - postgres
      - redis
    command: ["go", "run", "cmd/scheduler/main.go"] # Command to start the scheduler

  # Worker Service (Processes video tasks - safe to scale)
  worker1:
    build:
      context: .
      dockerfile: Dockerfile.dev
    volumes:
      - .:/app # Mounts local code so changes are reflected
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/instashorts?sslmode=disable
      - REDIS_URL=redis:6379
    depends_on:
      - postgres
      - redis
    command: ["go", "run", "cmd/worker/main.go"] # Command to start the worker
  
  worker2:
    build:
      context: .
      dockerfile: Dockerfile.dev
    volumes:
      - .:/app # Mounts local code so changes are reflected
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/instashorts?sslmode=disable
      - REDIS_URL=redis:6379
    depends_on:
      - postgres
      - redis
    command: ["go", "run", "cmd/worker/main.go"]

  # PostgreSQL Database
  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_DB: instashorts
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d instashorts"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: "redis:alpine"
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

volumes:
  postgres_data:
  redis_data: